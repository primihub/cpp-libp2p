// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/protocol/kademlia/protobuf/kademlia.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
namespace libp2p {
namespace protocol {
namespace kademlia {
namespace pb {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Peer;
struct Message_PeerDefaultTypeInternal;
extern Message_PeerDefaultTypeInternal _Message_Peer_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
}  // namespace pb
}  // namespace kademlia
}  // namespace protocol
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> ::libp2p::protocol::kademlia::pb::Message* Arena::CreateMaybeMessage<::libp2p::protocol::kademlia::pb::Message>(Arena*);
template<> ::libp2p::protocol::kademlia::pb::Message_Peer* Arena::CreateMaybeMessage<::libp2p::protocol::kademlia::pb::Message_Peer>(Arena*);
template<> ::libp2p::protocol::kademlia::pb::Record* Arena::CreateMaybeMessage<::libp2p::protocol::kademlia::pb::Record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace libp2p {
namespace protocol {
namespace kademlia {
namespace pb {

enum Message_MessageType : int {
  Message_MessageType_PUT_VALUE = 0,
  Message_MessageType_GET_VALUE = 1,
  Message_MessageType_ADD_PROVIDER = 2,
  Message_MessageType_GET_PROVIDERS = 3,
  Message_MessageType_FIND_NODE = 4,
  Message_MessageType_PING = 5,
  Message_MessageType_Message_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_MessageType_Message_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_MessageType_IsValid(int value);
constexpr Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_PUT_VALUE;
constexpr Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_PING;
constexpr int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor();
template<typename T>
inline const std::string& Message_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_MessageType_descriptor(), enum_t_value);
}
inline bool Message_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
enum Message_ConnectionType : int {
  Message_ConnectionType_NOT_CONNECTED = 0,
  Message_ConnectionType_CONNECTED = 1,
  Message_ConnectionType_CAN_CONNECT = 2,
  Message_ConnectionType_CANNOT_CONNECT = 3,
  Message_ConnectionType_Message_ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_ConnectionType_Message_ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_ConnectionType_IsValid(int value);
constexpr Message_ConnectionType Message_ConnectionType_ConnectionType_MIN = Message_ConnectionType_NOT_CONNECTED;
constexpr Message_ConnectionType Message_ConnectionType_ConnectionType_MAX = Message_ConnectionType_CANNOT_CONNECT;
constexpr int Message_ConnectionType_ConnectionType_ARRAYSIZE = Message_ConnectionType_ConnectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_ConnectionType_descriptor();
template<typename T>
inline const std::string& Message_ConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_ConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_ConnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_ConnectionType_descriptor(), enum_t_value);
}
inline bool Message_ConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_ConnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_ConnectionType>(
    Message_ConnectionType_descriptor(), name, value);
}
// ===================================================================

class Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.protocol.kademlia.pb.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  explicit constexpr Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return new Record();
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.protocol.kademlia.pb.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kTimeReceivedFieldNumber = 5,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string timeReceived = 5;
  void clear_timereceived();
  const std::string& timereceived() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timereceived(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timereceived();
  PROTOBUF_MUST_USE_RESULT std::string* release_timereceived();
  void set_allocated_timereceived(std::string* timereceived);
  private:
  const std::string& _internal_timereceived() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timereceived(const std::string& value);
  std::string* _internal_mutable_timereceived();
  public:

  // @@protoc_insertion_point(class_scope:libp2p.protocol.kademlia.pb.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timereceived_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
};
// -------------------------------------------------------------------

class Message_Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.protocol.kademlia.pb.Message.Peer) */ {
 public:
  inline Message_Peer() : Message_Peer(nullptr) {}
  ~Message_Peer() override;
  explicit constexpr Message_Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Peer(const Message_Peer& from);
  Message_Peer(Message_Peer&& from) noexcept
    : Message_Peer() {
    *this = ::std::move(from);
  }

  inline Message_Peer& operator=(const Message_Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Peer& operator=(Message_Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Peer* internal_default_instance() {
    return reinterpret_cast<const Message_Peer*>(
               &_Message_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_Peer& a, Message_Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Peer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Peer* New() const final {
    return new Message_Peer();
  }

  Message_Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Peer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.protocol.kademlia.pb.Message.Peer";
  }
  protected:
  explicit Message_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrsFieldNumber = 2,
    kIdFieldNumber = 1,
    kConnectionFieldNumber = 3,
  };
  // repeated bytes addrs = 2;
  int addrs_size() const;
  private:
  int _internal_addrs_size() const;
  public:
  void clear_addrs();
  const std::string& addrs(int index) const;
  std::string* mutable_addrs(int index);
  void set_addrs(int index, const std::string& value);
  void set_addrs(int index, std::string&& value);
  void set_addrs(int index, const char* value);
  void set_addrs(int index, const void* value, size_t size);
  std::string* add_addrs();
  void add_addrs(const std::string& value);
  void add_addrs(std::string&& value);
  void add_addrs(const char* value);
  void add_addrs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addrs();
  private:
  const std::string& _internal_addrs(int index) const;
  std::string* _internal_add_addrs();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .libp2p.protocol.kademlia.pb.Message.ConnectionType connection = 3;
  void clear_connection();
  ::libp2p::protocol::kademlia::pb::Message_ConnectionType connection() const;
  void set_connection(::libp2p::protocol::kademlia::pb::Message_ConnectionType value);
  private:
  ::libp2p::protocol::kademlia::pb::Message_ConnectionType _internal_connection() const;
  void _internal_set_connection(::libp2p::protocol::kademlia::pb::Message_ConnectionType value);
  public:

  // @@protoc_insertion_point(class_scope:libp2p.protocol.kademlia.pb.Message.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.protocol.kademlia.pb.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return new Message();
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.protocol.kademlia.pb.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_Peer Peer;

  typedef Message_MessageType MessageType;
  static constexpr MessageType PUT_VALUE =
    Message_MessageType_PUT_VALUE;
  static constexpr MessageType GET_VALUE =
    Message_MessageType_GET_VALUE;
  static constexpr MessageType ADD_PROVIDER =
    Message_MessageType_ADD_PROVIDER;
  static constexpr MessageType GET_PROVIDERS =
    Message_MessageType_GET_PROVIDERS;
  static constexpr MessageType FIND_NODE =
    Message_MessageType_FIND_NODE;
  static constexpr MessageType PING =
    Message_MessageType_PING;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Message_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  typedef Message_ConnectionType ConnectionType;
  static constexpr ConnectionType NOT_CONNECTED =
    Message_ConnectionType_NOT_CONNECTED;
  static constexpr ConnectionType CONNECTED =
    Message_ConnectionType_CONNECTED;
  static constexpr ConnectionType CAN_CONNECT =
    Message_ConnectionType_CAN_CONNECT;
  static constexpr ConnectionType CANNOT_CONNECT =
    Message_ConnectionType_CANNOT_CONNECT;
  static inline bool ConnectionType_IsValid(int value) {
    return Message_ConnectionType_IsValid(value);
  }
  static constexpr ConnectionType ConnectionType_MIN =
    Message_ConnectionType_ConnectionType_MIN;
  static constexpr ConnectionType ConnectionType_MAX =
    Message_ConnectionType_ConnectionType_MAX;
  static constexpr int ConnectionType_ARRAYSIZE =
    Message_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConnectionType_descriptor() {
    return Message_ConnectionType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConnectionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConnectionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConnectionType_Name.");
    return Message_ConnectionType_Name(enum_t_value);
  }
  static inline bool ConnectionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ConnectionType* value) {
    return Message_ConnectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCloserPeersFieldNumber = 8,
    kProviderPeersFieldNumber = 9,
    kKeyFieldNumber = 2,
    kRecordFieldNumber = 3,
    kTypeFieldNumber = 1,
    kClusterLevelRawFieldNumber = 10,
  };
  // repeated .libp2p.protocol.kademlia.pb.Message.Peer closerPeers = 8;
  int closerpeers_size() const;
  private:
  int _internal_closerpeers_size() const;
  public:
  void clear_closerpeers();
  ::libp2p::protocol::kademlia::pb::Message_Peer* mutable_closerpeers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >*
      mutable_closerpeers();
  private:
  const ::libp2p::protocol::kademlia::pb::Message_Peer& _internal_closerpeers(int index) const;
  ::libp2p::protocol::kademlia::pb::Message_Peer* _internal_add_closerpeers();
  public:
  const ::libp2p::protocol::kademlia::pb::Message_Peer& closerpeers(int index) const;
  ::libp2p::protocol::kademlia::pb::Message_Peer* add_closerpeers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >&
      closerpeers() const;

  // repeated .libp2p.protocol.kademlia.pb.Message.Peer providerPeers = 9;
  int providerpeers_size() const;
  private:
  int _internal_providerpeers_size() const;
  public:
  void clear_providerpeers();
  ::libp2p::protocol::kademlia::pb::Message_Peer* mutable_providerpeers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >*
      mutable_providerpeers();
  private:
  const ::libp2p::protocol::kademlia::pb::Message_Peer& _internal_providerpeers(int index) const;
  ::libp2p::protocol::kademlia::pb::Message_Peer* _internal_add_providerpeers();
  public:
  const ::libp2p::protocol::kademlia::pb::Message_Peer& providerpeers(int index) const;
  ::libp2p::protocol::kademlia::pb::Message_Peer* add_providerpeers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >&
      providerpeers() const;

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .libp2p.protocol.kademlia.pb.Record record = 3;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::libp2p::protocol::kademlia::pb::Record& record() const;
  PROTOBUF_MUST_USE_RESULT ::libp2p::protocol::kademlia::pb::Record* release_record();
  ::libp2p::protocol::kademlia::pb::Record* mutable_record();
  void set_allocated_record(::libp2p::protocol::kademlia::pb::Record* record);
  private:
  const ::libp2p::protocol::kademlia::pb::Record& _internal_record() const;
  ::libp2p::protocol::kademlia::pb::Record* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::libp2p::protocol::kademlia::pb::Record* record);
  ::libp2p::protocol::kademlia::pb::Record* unsafe_arena_release_record();

  // .libp2p.protocol.kademlia.pb.Message.MessageType type = 1;
  void clear_type();
  ::libp2p::protocol::kademlia::pb::Message_MessageType type() const;
  void set_type(::libp2p::protocol::kademlia::pb::Message_MessageType value);
  private:
  ::libp2p::protocol::kademlia::pb::Message_MessageType _internal_type() const;
  void _internal_set_type(::libp2p::protocol::kademlia::pb::Message_MessageType value);
  public:

  // int32 clusterLevelRaw = 10;
  void clear_clusterlevelraw();
  ::PROTOBUF_NAMESPACE_ID::int32 clusterlevelraw() const;
  void set_clusterlevelraw(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clusterlevelraw() const;
  void _internal_set_clusterlevelraw(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:libp2p.protocol.kademlia.pb.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer > closerpeers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer > providerpeers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::libp2p::protocol::kademlia::pb::Record* record_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 clusterlevelraw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// bytes key = 1;
inline void Record::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Record.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Record::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Record.key)
}
inline std::string* Record::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Record.key)
  return _s;
}
inline const std::string& Record::_internal_key() const {
  return key_.Get();
}
inline void Record::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Record::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Record.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Record::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Record.key)
}

// bytes value = 2;
inline void Record::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Record::value() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Record.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Record::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Record.value)
}
inline std::string* Record::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Record.value)
  return _s;
}
inline const std::string& Record::_internal_value() const {
  return value_.Get();
}
inline void Record::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Record::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Record::release_value() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Record.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Record::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Record.value)
}

// string timeReceived = 5;
inline void Record::clear_timereceived() {
  timereceived_.ClearToEmpty();
}
inline const std::string& Record::timereceived() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Record.timeReceived)
  return _internal_timereceived();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Record::set_timereceived(ArgT0&& arg0, ArgT... args) {
 
 timereceived_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Record.timeReceived)
}
inline std::string* Record::mutable_timereceived() {
  std::string* _s = _internal_mutable_timereceived();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Record.timeReceived)
  return _s;
}
inline const std::string& Record::_internal_timereceived() const {
  return timereceived_.Get();
}
inline void Record::_internal_set_timereceived(const std::string& value) {
  
  timereceived_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Record::_internal_mutable_timereceived() {
  
  return timereceived_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Record::release_timereceived() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Record.timeReceived)
  return timereceived_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Record::set_allocated_timereceived(std::string* timereceived) {
  if (timereceived != nullptr) {
    
  } else {
    
  }
  timereceived_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timereceived,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Record.timeReceived)
}

// -------------------------------------------------------------------

// Message_Peer

// bytes id = 1;
inline void Message_Peer::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Message_Peer::id() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.Peer.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Peer::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.Peer.id)
}
inline std::string* Message_Peer::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.Peer.id)
  return _s;
}
inline const std::string& Message_Peer::_internal_id() const {
  return id_.Get();
}
inline void Message_Peer::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message_Peer::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message_Peer::release_id() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Message.Peer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message_Peer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Message.Peer.id)
}

// repeated bytes addrs = 2;
inline int Message_Peer::_internal_addrs_size() const {
  return addrs_.size();
}
inline int Message_Peer::addrs_size() const {
  return _internal_addrs_size();
}
inline void Message_Peer::clear_addrs() {
  addrs_.Clear();
}
inline std::string* Message_Peer::add_addrs() {
  std::string* _s = _internal_add_addrs();
  // @@protoc_insertion_point(field_add_mutable:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
  return _s;
}
inline const std::string& Message_Peer::_internal_addrs(int index) const {
  return addrs_.Get(index);
}
inline const std::string& Message_Peer::addrs(int index) const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
  return _internal_addrs(index);
}
inline std::string* Message_Peer::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
  return addrs_.Mutable(index);
}
inline void Message_Peer::set_addrs(int index, const std::string& value) {
  addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::set_addrs(int index, std::string&& value) {
  addrs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::set_addrs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::set_addrs(int index, const void* value, size_t size) {
  addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline std::string* Message_Peer::_internal_add_addrs() {
  return addrs_.Add();
}
inline void Message_Peer::add_addrs(const std::string& value) {
  addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::add_addrs(std::string&& value) {
  addrs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::add_addrs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline void Message_Peer::add_addrs(const void* value, size_t size) {
  addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message_Peer::addrs() const {
  // @@protoc_insertion_point(field_list:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
  return addrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message_Peer::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:libp2p.protocol.kademlia.pb.Message.Peer.addrs)
  return &addrs_;
}

// .libp2p.protocol.kademlia.pb.Message.ConnectionType connection = 3;
inline void Message_Peer::clear_connection() {
  connection_ = 0;
}
inline ::libp2p::protocol::kademlia::pb::Message_ConnectionType Message_Peer::_internal_connection() const {
  return static_cast< ::libp2p::protocol::kademlia::pb::Message_ConnectionType >(connection_);
}
inline ::libp2p::protocol::kademlia::pb::Message_ConnectionType Message_Peer::connection() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.Peer.connection)
  return _internal_connection();
}
inline void Message_Peer::_internal_set_connection(::libp2p::protocol::kademlia::pb::Message_ConnectionType value) {
  
  connection_ = value;
}
inline void Message_Peer::set_connection(::libp2p::protocol::kademlia::pb::Message_ConnectionType value) {
  _internal_set_connection(value);
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.Peer.connection)
}

// -------------------------------------------------------------------

// Message

// .libp2p.protocol.kademlia.pb.Message.MessageType type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::libp2p::protocol::kademlia::pb::Message_MessageType Message::_internal_type() const {
  return static_cast< ::libp2p::protocol::kademlia::pb::Message_MessageType >(type_);
}
inline ::libp2p::protocol::kademlia::pb::Message_MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::libp2p::protocol::kademlia::pb::Message_MessageType value) {
  
  type_ = value;
}
inline void Message::set_type(::libp2p::protocol::kademlia::pb::Message_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.type)
}

// int32 clusterLevelRaw = 10;
inline void Message::clear_clusterlevelraw() {
  clusterlevelraw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_clusterlevelraw() const {
  return clusterlevelraw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::clusterlevelraw() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.clusterLevelRaw)
  return _internal_clusterlevelraw();
}
inline void Message::_internal_set_clusterlevelraw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clusterlevelraw_ = value;
}
inline void Message::set_clusterlevelraw(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clusterlevelraw(value);
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.clusterLevelRaw)
}

// bytes key = 2;
inline void Message::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Message::key() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.protocol.kademlia.pb.Message.key)
}
inline std::string* Message::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.key)
  return _s;
}
inline const std::string& Message::_internal_key() const {
  return key_.Get();
}
inline void Message::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Message::release_key() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Message.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Message::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Message.key)
}

// .libp2p.protocol.kademlia.pb.Record record = 3;
inline bool Message::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool Message::has_record() const {
  return _internal_has_record();
}
inline void Message::clear_record() {
  if (GetArenaForAllocation() == nullptr && record_ != nullptr) {
    delete record_;
  }
  record_ = nullptr;
}
inline const ::libp2p::protocol::kademlia::pb::Record& Message::_internal_record() const {
  const ::libp2p::protocol::kademlia::pb::Record* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::libp2p::protocol::kademlia::pb::Record&>(
      ::libp2p::protocol::kademlia::pb::_Record_default_instance_);
}
inline const ::libp2p::protocol::kademlia::pb::Record& Message::record() const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.record)
  return _internal_record();
}
inline void Message::unsafe_arena_set_allocated_record(
    ::libp2p::protocol::kademlia::pb::Record* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:libp2p.protocol.kademlia.pb.Message.record)
}
inline ::libp2p::protocol::kademlia::pb::Record* Message::release_record() {
  
  ::libp2p::protocol::kademlia::pb::Record* temp = record_;
  record_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::libp2p::protocol::kademlia::pb::Record* Message::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:libp2p.protocol.kademlia.pb.Message.record)
  
  ::libp2p::protocol::kademlia::pb::Record* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::libp2p::protocol::kademlia::pb::Record* Message::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::libp2p::protocol::kademlia::pb::Record>(GetArenaForAllocation());
    record_ = p;
  }
  return record_;
}
inline ::libp2p::protocol::kademlia::pb::Record* Message::mutable_record() {
  ::libp2p::protocol::kademlia::pb::Record* _msg = _internal_mutable_record();
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.record)
  return _msg;
}
inline void Message::set_allocated_record(::libp2p::protocol::kademlia::pb::Record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::libp2p::protocol::kademlia::pb::Record>::GetOwningArena(record);
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:libp2p.protocol.kademlia.pb.Message.record)
}

// repeated .libp2p.protocol.kademlia.pb.Message.Peer closerPeers = 8;
inline int Message::_internal_closerpeers_size() const {
  return closerpeers_.size();
}
inline int Message::closerpeers_size() const {
  return _internal_closerpeers_size();
}
inline void Message::clear_closerpeers() {
  closerpeers_.Clear();
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::mutable_closerpeers(int index) {
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.closerPeers)
  return closerpeers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >*
Message::mutable_closerpeers() {
  // @@protoc_insertion_point(field_mutable_list:libp2p.protocol.kademlia.pb.Message.closerPeers)
  return &closerpeers_;
}
inline const ::libp2p::protocol::kademlia::pb::Message_Peer& Message::_internal_closerpeers(int index) const {
  return closerpeers_.Get(index);
}
inline const ::libp2p::protocol::kademlia::pb::Message_Peer& Message::closerpeers(int index) const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.closerPeers)
  return _internal_closerpeers(index);
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::_internal_add_closerpeers() {
  return closerpeers_.Add();
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::add_closerpeers() {
  ::libp2p::protocol::kademlia::pb::Message_Peer* _add = _internal_add_closerpeers();
  // @@protoc_insertion_point(field_add:libp2p.protocol.kademlia.pb.Message.closerPeers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >&
Message::closerpeers() const {
  // @@protoc_insertion_point(field_list:libp2p.protocol.kademlia.pb.Message.closerPeers)
  return closerpeers_;
}

// repeated .libp2p.protocol.kademlia.pb.Message.Peer providerPeers = 9;
inline int Message::_internal_providerpeers_size() const {
  return providerpeers_.size();
}
inline int Message::providerpeers_size() const {
  return _internal_providerpeers_size();
}
inline void Message::clear_providerpeers() {
  providerpeers_.Clear();
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::mutable_providerpeers(int index) {
  // @@protoc_insertion_point(field_mutable:libp2p.protocol.kademlia.pb.Message.providerPeers)
  return providerpeers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >*
Message::mutable_providerpeers() {
  // @@protoc_insertion_point(field_mutable_list:libp2p.protocol.kademlia.pb.Message.providerPeers)
  return &providerpeers_;
}
inline const ::libp2p::protocol::kademlia::pb::Message_Peer& Message::_internal_providerpeers(int index) const {
  return providerpeers_.Get(index);
}
inline const ::libp2p::protocol::kademlia::pb::Message_Peer& Message::providerpeers(int index) const {
  // @@protoc_insertion_point(field_get:libp2p.protocol.kademlia.pb.Message.providerPeers)
  return _internal_providerpeers(index);
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::_internal_add_providerpeers() {
  return providerpeers_.Add();
}
inline ::libp2p::protocol::kademlia::pb::Message_Peer* Message::add_providerpeers() {
  ::libp2p::protocol::kademlia::pb::Message_Peer* _add = _internal_add_providerpeers();
  // @@protoc_insertion_point(field_add:libp2p.protocol.kademlia.pb.Message.providerPeers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libp2p::protocol::kademlia::pb::Message_Peer >&
Message::providerpeers() const {
  // @@protoc_insertion_point(field_list:libp2p.protocol.kademlia.pb.Message.providerPeers)
  return providerpeers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace kademlia
}  // namespace protocol
}  // namespace libp2p

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::libp2p::protocol::kademlia::pb::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libp2p::protocol::kademlia::pb::Message_MessageType>() {
  return ::libp2p::protocol::kademlia::pb::Message_MessageType_descriptor();
}
template <> struct is_proto_enum< ::libp2p::protocol::kademlia::pb::Message_ConnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::libp2p::protocol::kademlia::pb::Message_ConnectionType>() {
  return ::libp2p::protocol::kademlia::pb::Message_ConnectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fprotocol_2fkademlia_2fprotobuf_2fkademlia_2eproto
