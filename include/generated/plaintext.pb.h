// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/security/plaintext/protobuf/plaintext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "src/crypto/protobuf/keys.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto;
namespace libp2p {
namespace security {
namespace plaintext {
namespace protobuf {
class Exchange;
struct ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
}  // namespace protobuf
}  // namespace plaintext
}  // namespace security
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> ::libp2p::security::plaintext::protobuf::Exchange* Arena::CreateMaybeMessage<::libp2p::security::plaintext::protobuf::Exchange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace libp2p {
namespace security {
namespace plaintext {
namespace protobuf {

// ===================================================================

class Exchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.security.plaintext.protobuf.Exchange) */ {
 public:
  inline Exchange() : Exchange(nullptr) {}
  ~Exchange() override;
  explicit constexpr Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return new Exchange();
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Exchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Exchange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.security.plaintext.protobuf.Exchange";
  }
  protected:
  explicit Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPubkeyFieldNumber = 2,
  };
  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .libp2p.crypto.protobuf.PublicKey pubkey = 2;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const ::libp2p::crypto::protobuf::PublicKey& pubkey() const;
  PROTOBUF_MUST_USE_RESULT ::libp2p::crypto::protobuf::PublicKey* release_pubkey();
  ::libp2p::crypto::protobuf::PublicKey* mutable_pubkey();
  void set_allocated_pubkey(::libp2p::crypto::protobuf::PublicKey* pubkey);
  private:
  const ::libp2p::crypto::protobuf::PublicKey& _internal_pubkey() const;
  ::libp2p::crypto::protobuf::PublicKey* _internal_mutable_pubkey();
  public:
  void unsafe_arena_set_allocated_pubkey(
      ::libp2p::crypto::protobuf::PublicKey* pubkey);
  ::libp2p::crypto::protobuf::PublicKey* unsafe_arena_release_pubkey();

  // @@protoc_insertion_point(class_scope:libp2p.security.plaintext.protobuf.Exchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::libp2p::crypto::protobuf::PublicKey* pubkey_;
  friend struct ::TableStruct_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Exchange

// optional bytes id = 1;
inline bool Exchange::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Exchange::has_id() const {
  return _internal_has_id();
}
inline void Exchange::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Exchange::id() const {
  // @@protoc_insertion_point(field_get:libp2p.security.plaintext.protobuf.Exchange.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Exchange::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.plaintext.protobuf.Exchange.id)
}
inline std::string* Exchange::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:libp2p.security.plaintext.protobuf.Exchange.id)
  return _s;
}
inline const std::string& Exchange::_internal_id() const {
  return id_.Get();
}
inline void Exchange::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Exchange::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Exchange::release_id() {
  // @@protoc_insertion_point(field_release:libp2p.security.plaintext.protobuf.Exchange.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Exchange::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.plaintext.protobuf.Exchange.id)
}

// optional .libp2p.crypto.protobuf.PublicKey pubkey = 2;
inline bool Exchange::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pubkey_ != nullptr);
  return value;
}
inline bool Exchange::has_pubkey() const {
  return _internal_has_pubkey();
}
inline const ::libp2p::crypto::protobuf::PublicKey& Exchange::_internal_pubkey() const {
  const ::libp2p::crypto::protobuf::PublicKey* p = pubkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::libp2p::crypto::protobuf::PublicKey&>(
      ::libp2p::crypto::protobuf::_PublicKey_default_instance_);
}
inline const ::libp2p::crypto::protobuf::PublicKey& Exchange::pubkey() const {
  // @@protoc_insertion_point(field_get:libp2p.security.plaintext.protobuf.Exchange.pubkey)
  return _internal_pubkey();
}
inline void Exchange::unsafe_arena_set_allocated_pubkey(
    ::libp2p::crypto::protobuf::PublicKey* pubkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkey_);
  }
  pubkey_ = pubkey;
  if (pubkey) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:libp2p.security.plaintext.protobuf.Exchange.pubkey)
}
inline ::libp2p::crypto::protobuf::PublicKey* Exchange::release_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
  ::libp2p::crypto::protobuf::PublicKey* temp = pubkey_;
  pubkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::libp2p::crypto::protobuf::PublicKey* Exchange::unsafe_arena_release_pubkey() {
  // @@protoc_insertion_point(field_release:libp2p.security.plaintext.protobuf.Exchange.pubkey)
  _has_bits_[0] &= ~0x00000002u;
  ::libp2p::crypto::protobuf::PublicKey* temp = pubkey_;
  pubkey_ = nullptr;
  return temp;
}
inline ::libp2p::crypto::protobuf::PublicKey* Exchange::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000002u;
  if (pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::libp2p::crypto::protobuf::PublicKey>(GetArenaForAllocation());
    pubkey_ = p;
  }
  return pubkey_;
}
inline ::libp2p::crypto::protobuf::PublicKey* Exchange::mutable_pubkey() {
  ::libp2p::crypto::protobuf::PublicKey* _msg = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:libp2p.security.plaintext.protobuf.Exchange.pubkey)
  return _msg;
}
inline void Exchange::set_allocated_pubkey(::libp2p::crypto::protobuf::PublicKey* pubkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkey_);
  }
  if (pubkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkey));
    if (message_arena != submessage_arena) {
      pubkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubkey, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pubkey_ = pubkey;
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.plaintext.protobuf.Exchange.pubkey)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace plaintext
}  // namespace security
}  // namespace libp2p

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fplaintext_2fprotobuf_2fplaintext_2eproto
