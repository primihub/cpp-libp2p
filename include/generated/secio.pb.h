// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/security/secio/protobuf/secio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto;
namespace libp2p {
namespace security {
namespace secio {
namespace protobuf {
class Exchange;
struct ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class Propose;
struct ProposeDefaultTypeInternal;
extern ProposeDefaultTypeInternal _Propose_default_instance_;
}  // namespace protobuf
}  // namespace secio
}  // namespace security
}  // namespace libp2p
PROTOBUF_NAMESPACE_OPEN
template<> ::libp2p::security::secio::protobuf::Exchange* Arena::CreateMaybeMessage<::libp2p::security::secio::protobuf::Exchange>(Arena*);
template<> ::libp2p::security::secio::protobuf::Propose* Arena::CreateMaybeMessage<::libp2p::security::secio::protobuf::Propose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace libp2p {
namespace security {
namespace secio {
namespace protobuf {

// ===================================================================

class Propose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.security.secio.protobuf.Propose) */ {
 public:
  inline Propose() : Propose(nullptr) {}
  ~Propose() override;
  explicit constexpr Propose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Propose(const Propose& from);
  Propose(Propose&& from) noexcept
    : Propose() {
    *this = ::std::move(from);
  }

  inline Propose& operator=(const Propose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Propose& operator=(Propose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Propose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Propose* internal_default_instance() {
    return reinterpret_cast<const Propose*>(
               &_Propose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Propose& a, Propose& b) {
    a.Swap(&b);
  }
  inline void Swap(Propose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Propose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Propose* New() const final {
    return new Propose();
  }

  Propose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Propose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Propose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Propose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Propose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.security.secio.protobuf.Propose";
  }
  protected:
  explicit Propose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandFieldNumber = 1,
    kPubkeyFieldNumber = 2,
    kExchangesFieldNumber = 3,
    kCiphersFieldNumber = 4,
    kHashesFieldNumber = 5,
  };
  // optional bytes rand = 1;
  bool has_rand() const;
  private:
  bool _internal_has_rand() const;
  public:
  void clear_rand();
  const std::string& rand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rand();
  PROTOBUF_MUST_USE_RESULT std::string* release_rand();
  void set_allocated_rand(std::string* rand);
  private:
  const std::string& _internal_rand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rand(const std::string& value);
  std::string* _internal_mutable_rand();
  public:

  // optional bytes pubkey = 2;
  bool has_pubkey() const;
  private:
  bool _internal_has_pubkey() const;
  public:
  void clear_pubkey();
  const std::string& pubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pubkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // optional string exchanges = 3;
  bool has_exchanges() const;
  private:
  bool _internal_has_exchanges() const;
  public:
  void clear_exchanges();
  const std::string& exchanges() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchanges(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchanges();
  PROTOBUF_MUST_USE_RESULT std::string* release_exchanges();
  void set_allocated_exchanges(std::string* exchanges);
  private:
  const std::string& _internal_exchanges() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchanges(const std::string& value);
  std::string* _internal_mutable_exchanges();
  public:

  // optional string ciphers = 4;
  bool has_ciphers() const;
  private:
  bool _internal_has_ciphers() const;
  public:
  void clear_ciphers();
  const std::string& ciphers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ciphers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ciphers();
  PROTOBUF_MUST_USE_RESULT std::string* release_ciphers();
  void set_allocated_ciphers(std::string* ciphers);
  private:
  const std::string& _internal_ciphers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ciphers(const std::string& value);
  std::string* _internal_mutable_ciphers();
  public:

  // optional string hashes = 5;
  bool has_hashes() const;
  private:
  bool _internal_has_hashes() const;
  public:
  void clear_hashes();
  const std::string& hashes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashes();
  PROTOBUF_MUST_USE_RESULT std::string* release_hashes();
  void set_allocated_hashes(std::string* hashes);
  private:
  const std::string& _internal_hashes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashes(const std::string& value);
  std::string* _internal_mutable_hashes();
  public:

  // @@protoc_insertion_point(class_scope:libp2p.security.secio.protobuf.Propose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchanges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashes_;
  friend struct ::TableStruct_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto;
};
// -------------------------------------------------------------------

class Exchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:libp2p.security.secio.protobuf.Exchange) */ {
 public:
  inline Exchange() : Exchange(nullptr) {}
  ~Exchange() override;
  explicit constexpr Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Exchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return new Exchange();
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Exchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Exchange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "libp2p.security.secio.protobuf.Exchange";
  }
  protected:
  explicit Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpubkeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // optional bytes epubkey = 1;
  bool has_epubkey() const;
  private:
  bool _internal_has_epubkey() const;
  public:
  void clear_epubkey();
  const std::string& epubkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_epubkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_epubkey();
  PROTOBUF_MUST_USE_RESULT std::string* release_epubkey();
  void set_allocated_epubkey(std::string* epubkey);
  private:
  const std::string& _internal_epubkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_epubkey(const std::string& value);
  std::string* _internal_mutable_epubkey();
  public:

  // optional bytes signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:libp2p.security.secio.protobuf.Exchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr epubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Propose

// optional bytes rand = 1;
inline bool Propose::_internal_has_rand() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Propose::has_rand() const {
  return _internal_has_rand();
}
inline void Propose::clear_rand() {
  rand_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Propose::rand() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Propose.rand)
  return _internal_rand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Propose::set_rand(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rand_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Propose.rand)
}
inline std::string* Propose::mutable_rand() {
  std::string* _s = _internal_mutable_rand();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Propose.rand)
  return _s;
}
inline const std::string& Propose::_internal_rand() const {
  return rand_.Get();
}
inline void Propose::_internal_set_rand(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Propose::_internal_mutable_rand() {
  _has_bits_[0] |= 0x00000001u;
  return rand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Propose::release_rand() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Propose.rand)
  if (!_internal_has_rand()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rand_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Propose::set_allocated_rand(std::string* rand) {
  if (rand != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rand,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Propose.rand)
}

// optional bytes pubkey = 2;
inline bool Propose::_internal_has_pubkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Propose::has_pubkey() const {
  return _internal_has_pubkey();
}
inline void Propose::clear_pubkey() {
  pubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Propose::pubkey() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Propose.pubkey)
  return _internal_pubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Propose::set_pubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 pubkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Propose.pubkey)
}
inline std::string* Propose::mutable_pubkey() {
  std::string* _s = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Propose.pubkey)
  return _s;
}
inline const std::string& Propose::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void Propose::_internal_set_pubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Propose::_internal_mutable_pubkey() {
  _has_bits_[0] |= 0x00000002u;
  return pubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Propose::release_pubkey() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Propose.pubkey)
  if (!_internal_has_pubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pubkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Propose::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Propose.pubkey)
}

// optional string exchanges = 3;
inline bool Propose::_internal_has_exchanges() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Propose::has_exchanges() const {
  return _internal_has_exchanges();
}
inline void Propose::clear_exchanges() {
  exchanges_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Propose::exchanges() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Propose.exchanges)
  return _internal_exchanges();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Propose::set_exchanges(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 exchanges_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Propose.exchanges)
}
inline std::string* Propose::mutable_exchanges() {
  std::string* _s = _internal_mutable_exchanges();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Propose.exchanges)
  return _s;
}
inline const std::string& Propose::_internal_exchanges() const {
  return exchanges_.Get();
}
inline void Propose::_internal_set_exchanges(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  exchanges_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Propose::_internal_mutable_exchanges() {
  _has_bits_[0] |= 0x00000004u;
  return exchanges_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Propose::release_exchanges() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Propose.exchanges)
  if (!_internal_has_exchanges()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return exchanges_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Propose::set_allocated_exchanges(std::string* exchanges) {
  if (exchanges != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  exchanges_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchanges,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Propose.exchanges)
}

// optional string ciphers = 4;
inline bool Propose::_internal_has_ciphers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Propose::has_ciphers() const {
  return _internal_has_ciphers();
}
inline void Propose::clear_ciphers() {
  ciphers_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Propose::ciphers() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Propose.ciphers)
  return _internal_ciphers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Propose::set_ciphers(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 ciphers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Propose.ciphers)
}
inline std::string* Propose::mutable_ciphers() {
  std::string* _s = _internal_mutable_ciphers();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Propose.ciphers)
  return _s;
}
inline const std::string& Propose::_internal_ciphers() const {
  return ciphers_.Get();
}
inline void Propose::_internal_set_ciphers(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ciphers_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Propose::_internal_mutable_ciphers() {
  _has_bits_[0] |= 0x00000008u;
  return ciphers_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Propose::release_ciphers() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Propose.ciphers)
  if (!_internal_has_ciphers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ciphers_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Propose::set_allocated_ciphers(std::string* ciphers) {
  if (ciphers != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ciphers_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ciphers,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Propose.ciphers)
}

// optional string hashes = 5;
inline bool Propose::_internal_has_hashes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Propose::has_hashes() const {
  return _internal_has_hashes();
}
inline void Propose::clear_hashes() {
  hashes_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Propose::hashes() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Propose.hashes)
  return _internal_hashes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Propose::set_hashes(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 hashes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Propose.hashes)
}
inline std::string* Propose::mutable_hashes() {
  std::string* _s = _internal_mutable_hashes();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Propose.hashes)
  return _s;
}
inline const std::string& Propose::_internal_hashes() const {
  return hashes_.Get();
}
inline void Propose::_internal_set_hashes(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  hashes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Propose::_internal_mutable_hashes() {
  _has_bits_[0] |= 0x00000010u;
  return hashes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Propose::release_hashes() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Propose.hashes)
  if (!_internal_has_hashes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return hashes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Propose::set_allocated_hashes(std::string* hashes) {
  if (hashes != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  hashes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hashes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Propose.hashes)
}

// -------------------------------------------------------------------

// Exchange

// optional bytes epubkey = 1;
inline bool Exchange::_internal_has_epubkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Exchange::has_epubkey() const {
  return _internal_has_epubkey();
}
inline void Exchange::clear_epubkey() {
  epubkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Exchange::epubkey() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Exchange.epubkey)
  return _internal_epubkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Exchange::set_epubkey(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 epubkey_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Exchange.epubkey)
}
inline std::string* Exchange::mutable_epubkey() {
  std::string* _s = _internal_mutable_epubkey();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Exchange.epubkey)
  return _s;
}
inline const std::string& Exchange::_internal_epubkey() const {
  return epubkey_.Get();
}
inline void Exchange::_internal_set_epubkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  epubkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Exchange::_internal_mutable_epubkey() {
  _has_bits_[0] |= 0x00000001u;
  return epubkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Exchange::release_epubkey() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Exchange.epubkey)
  if (!_internal_has_epubkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return epubkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Exchange::set_allocated_epubkey(std::string* epubkey) {
  if (epubkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  epubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), epubkey,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Exchange.epubkey)
}

// optional bytes signature = 2;
inline bool Exchange::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Exchange::has_signature() const {
  return _internal_has_signature();
}
inline void Exchange::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Exchange::signature() const {
  // @@protoc_insertion_point(field_get:libp2p.security.secio.protobuf.Exchange.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Exchange::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:libp2p.security.secio.protobuf.Exchange.signature)
}
inline std::string* Exchange::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:libp2p.security.secio.protobuf.Exchange.signature)
  return _s;
}
inline const std::string& Exchange::_internal_signature() const {
  return signature_.Get();
}
inline void Exchange::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Exchange::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Exchange::release_signature() {
  // @@protoc_insertion_point(field_release:libp2p.security.secio.protobuf.Exchange.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Exchange::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:libp2p.security.secio.protobuf.Exchange.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace secio
}  // namespace security
}  // namespace libp2p

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fsecurity_2fsecio_2fprotobuf_2fsecio_2eproto
